% function [fitCharacteristics]=Rel_FF_Single_Cone_Analyses(stimRootDir, controlRootDir)
% [fitCharacteristics]=Rel_FF_Single_Cone_Analyses(stimRootDir, controlRootDir)
%
%   Calculates pooled variance across a set of pre-analyzed 
%   signals from a single cone's stimulus and control trials, performs 
%   the subtraction between its standard deviations, and performs a
%   piecewise fit of the subtraction.
%
%   This script is designed to work with FULL FIELD datasets- that is, each
%   dataset (mat file) contains *only* control or stimulus data.
%
%   Normally, the user doesn't need to select a stimulus or control root
%   directory, but if the software is run by
%   itself it will prompt the user for the folders containing the
%   pre-analyzed mat files generated by Rel_FF_Temporal_Reflectivity_Analysis.m.
%
% Inputs:
%       stimRootDir: The folder path of the pre-analyzed (.mat) stimulus
%       trials. Each mat file must contain valid stimulus signals.
%
%       controlRootDir: The folder path of the pre-analyzed (.mat) control
%       trials. Each mat file must contain valid control signals.
%
%
% Outputs:
%       fitCharacteristics: Information extracted from the mat files and
%       the fitted subtracted signal.
%
% Created by Robert F Cooper 2021-05-24
%

clear;


CUTOFF = 10;
NUMTRIALS= 25;
CRITICAL_REGION = 72:92; 
window_size = 5;
half_window = floor(window_size/2);


if ~exist('stimRootDir','var')
    stimRootDir = uigetdir(pwd, 'Select the directory containing the profiles');
end

profileSDataNames = read_folder_contents(stimRootDir,'mat');



% For structure:
% /stuff/id/date/wavelength/time/intensity/location/data/Profile_Data

[remain kid] = getparent(stimRootDir); % data
[remain stim_loc] = getparent(remain); % location 
[remain stim_intensity] = getparent(remain); % intensity 
[remain stim_time] = getparent(remain); % time
[remain stimwave] = getparent(remain); % wavelength
% [remain sessiondate] = getparent(remain); % date
[~, id] = getparent(remain); % id
outFname = [id '_' stimwave '_' stim_intensity '_' stim_time  '_' stim_loc '_' num2str(length(profileSDataNames)) '_single_cone_signals'];


%% Code for determining variance across all signals at given timepoint

THEwaitbar = waitbar(0,'Loading stimulus profiles...');

max_index=0;

load(fullfile(stimRootDir, profileSDataNames{1}));
stim_coords = ref_coords;

allamps = nan(size(ref_coords,1), length(profileSDataNames));
allampsnorm = nan(size(ref_coords,1), length(profileSDataNames));


for j=1:length(profileSDataNames)

    waitbar(j/length(profileSDataNames),THEwaitbar,'Loading stimulus profiles...');
    
    ref_coords=[];
    profileSDataNames{j}
    load(fullfile(stimRootDir,profileSDataNames{j}));
    
    thesecoords = union(stim_coords, ref_coords,'rows');
    
    % These all must be the same length! (Same coordinate set)
    if size(ref_coords,1) ~= size(thesecoords,1)
        error('Coordinate lists different between mat files in this directory. Unable to perform analysis.')
    end
    
    
        
    allamps(:,j) = maxamp;
    allampsnorm(:,j) = maxampnorm;
    
end

allcoords = ref_coords;

%%
DENSTOMETRY_THRESHOLD = 0.1681;
stimulus_frames = [72 108];

for c=1:size(allcoords,1)

    if densitometry_fit_amplitude(c) < DENSTOMETRY_THRESHOLD
%         figure(5); clf; hold on; 
        for j=1:length(profileSDataNames)
            figure(5); clf;
            
            load(fullfile(stimRootDir,profileSDataNames{j}));
            if ~isempty(cell_times{c}) && log(allampsnorm(c,j))>0.5
                
                interpinds = cell_times{c}(1):cell_times{c}(end);
        
                fullsig = interp1(cell_times{c}, norm_cell_reflectance{c}, interpinds, 'linear');

                filtbank =cwtfilterbank('Wavelet','morse','SignalLength',numel(interpinds),'SamplingFrequency',17.85,'WaveletParameters',[3 30], 'FrequencyLimits',[0.25 1]);
                 figure(21); clf;
                cwt(fullsig,'Filterbank',filtbank);
                
                [wt, f, coi,fb,scalingfs]=cwt(fullsig,'Filterbank',filtbank);
                wtpwrspect =(abs(wt));
                
                [maxvalrows, maxrow]=max(wtpwrspect(:,stimulus_frames(1):stimulus_frames(2)),[], 1);
                [maxvalcols, maxcol]=max(maxvalrows);
                
                
                figure(5); clf;
                plot(cell_times{c}/17.85, norm_cell_reflectance{c}-norm_cell_reflectance{c}(1));
                title( [num2str( log(allampsnorm(c,j)) ) ' at ' num2str(f(maxrow(maxcol))) 'Hz']);
                pause;
            end
        end
%         hold off; title( num2str( log(median(allampsnorm(c,:),2,'omitnan')) ) );
%         pause;
    end
    
end

%%
figure; 
subplot(5,1,1); histogram(log(median(allampsnorm(:,1:10),2,'omitnan')),100); axis([-1.5 4 0 60])
subplot(5,1,2); histogram(log(median(allampsnorm(:,1:20),2,'omitnan')),100); axis([-1.5 4 0 60])
subplot(5,1,3); histogram(log(median(allampsnorm(:,1:30),2,'omitnan')),100); axis([-1.5 4 0 60])
subplot(5,1,4); histogram(log(median(allampsnorm(:,1:40),2,'omitnan')),100); axis([-1.5 4 0 60])
subplot(5,1,5); histogram(log(median(allampsnorm,2,'omitnan')),100); axis([-1.5 4 0 60])

AmpResp = median(allamps,2,'omitnan');
MedianResp = median(allampsnorm,2,'omitnan');

save([outFname '.mat'], 'AmpResp','MedianResp','allcoords','ref_image');
